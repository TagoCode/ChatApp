{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["socket","io","connect","App","useState","message","name","state","setState","chat","setChat","useEffect","on","onTextChange","e","target","value","className","onSubmit","preventDefault","emit","TextField","onChange","label","id","variant","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"+SAKMA,G,MAASC,IAAGC,QAAQ,0BAkEXC,MAhEf,WAAgB,IAAD,EACeC,mBAAS,CAAEC,QAAS,GAAIC,KAAM,KAD7C,mBACJC,EADI,KACGC,EADH,OAEaJ,mBAAS,IAFtB,mBAEJK,EAFI,KAEEC,EAFF,KAKXC,qBAAU,WACNX,EAAOY,GAAG,WAAW,YAAsB,IAApBN,EAAmB,EAAnBA,KAAMD,EAAa,EAAbA,QACzBK,EAAQ,GAAD,mBAAKD,GAAL,CAAW,CAACH,OAAMD,oBAIjC,IAAMQ,EAAe,SAAAC,GACjBN,EAAS,2BAAID,GAAL,kBAAaO,EAAEC,OAAOT,KAAOQ,EAAEC,OAAOC,UAoBlD,OACI,yBAAKC,UAAU,QACX,0BAAMC,SAnBU,SAACJ,GACrBA,EAAEK,iBADyB,IAEpBb,EAAiBC,EAAjBD,KAAMD,EAAWE,EAAXF,QACbL,EAAOoB,KAAK,UAAW,CAACd,OAAMD,YAC9BG,EAAS,CAACH,QAAS,GAAIC,WAgBf,yCACA,yBAAKW,UAAU,cACX,kBAACI,EAAA,EAAD,CACIf,KAAK,OACLgB,SAAU,SAAAR,GAAC,OAAID,EAAaC,IAC5BE,MAAOT,EAAMD,KACbiB,MAAM,UAGd,6BACI,kBAACF,EAAA,EAAD,CACIf,KAAK,UACLgB,SAAU,SAAAR,GAAC,OAAID,EAAaC,IAC5BE,MAAOT,EAAMF,QACbmB,GAAG,4BACHC,QAAQ,WACRF,MAAM,aAGd,iDAEJ,yBAAKN,UAAU,eACX,wCAlCLR,EAAKiB,KAAI,WAAkBC,GAAlB,IAAErB,EAAF,EAAEA,KAAMD,EAAR,EAAQA,QAAR,OACZ,yBAAKuB,IAAKD,GACN,4BAAKrB,EAAL,KAAY,8BAAOD,WCpBXwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMzC,c","file":"static/js/main.cff99797.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client'\nimport TextField from '@material-ui/core/TextField'\nimport './App.css';\n\nconst socket = io.connect('http://localhost:4000')\n\nfunction App() {\n    const [state, setState] = useState({ message: '', name: '' })\n    const [chat, setChat] = useState([])\n\n\n    useEffect(() => {\n        socket.on('message', ({name, message}) => {\n            setChat([...chat, {name, message}])\n        })\n    })\n\n    const onTextChange = e => {\n        setState({...state, [e.target.name]: e.target.value})\n    }\n\n    const onMessageSubmit = (e) => {\n        e.preventDefault()\n        const {name, message} = state\n        socket.emit('message', {name, message})\n        setState({message: '', name })\n    }\n\nconst renderChat = () => {\n    return chat.map(({name, message}, index) => (\n        <div key={index}>\n            <h3>{name}: <span>{message}</span></h3>\n        </div>\n    ))\n\n}\n\n\n    return (\n        <div className=\"card\">\n            <form onSubmit={onMessageSubmit}>\n                <h1>Messenger</h1>\n                <div className=\"name-field\">\n                    <TextField\n                        name=\"name\"\n                        onChange={e => onTextChange(e)}\n                        value={state.name}\n                        label=\"Name\"\n                    />\n                </div>\n                <div >\n                    <TextField\n                        name=\"message\"\n                        onChange={e => onTextChange(e)}\n                        value={state.message}\n                        id=\"outlined-multiline-static\"\n                        variant=\"outlined\"\n                        label=\"Message\"\n                    />\n                </div>\n                <button>Send Message</button>\n            </form>\n            <div className=\"render-chat\">\n                <h1>Chat Log</h1>\n                {renderChat()}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}